package com.xworkz.Override.runner;

import com.xworkz.Override.external.*;
import com.xworkz.Override.internal.*;

public class Main {
    public static void main(String[] args) {
        Shape shapeRef = new Shape();
        shapeRef.draw();
        System.out.println("--------------------------");
        Shape shapeCircle = new Circle();
        shapeCircle.draw();
        System.out.println("--------------------------");
        Circle circleRef = new Circle();
        circleRef.draw();
        System.out.println("--------------------------");
        Rectangle rectangle = new Rectangle();
        rectangle.Tringle(shapeRef);
        rectangle.Tringle(shapeCircle);
        rectangle.Tringle(circleRef);
        System.out.println("==========================");



        Doll plainDoll = new Doll();
        plainDoll.show();
        System.out.println("--------------------------");
        Doll polyDoll = new FashionDoll();
        polyDoll.show();
        System.out.println("--------------------------");
        FashionDoll fancyDoll = new FashionDoll();
        fancyDoll.show();
        System.out.println("--------------------------");
        BarbieDoll barbie = new BarbieDoll();
        barbie.decorate(plainDoll);
        barbie.decorate(polyDoll);
        barbie.decorate(fancyDoll);
        System.out.println("==========================");



        Alovera basicAlovera = new Alovera();
        basicAlovera.apply();
        System.out.println("--------------------------");
        Alovera polyAlovera = new Medical();
        polyAlovera.apply();
        System.out.println("--------------------------");
        Medical medAlovera = new Medical();
        medAlovera.apply();
        System.out.println("--------------------------");
        NaturalAlovera natural1 = new NaturalAlovera();
        natural1.treat(basicAlovera);
        natural1.treat(polyAlovera);
        natural1.treat(medAlovera);
        System.out.println("==========================");



        Pin basicPin = new Pin();
        basicPin.use();
        System.out.println("--------------------------");
        Pin polyPin = new SafetyPin();
        polyPin.use();
        System.out.println("--------------------------");
        SafetyPin safetyPin = new SafetyPin();
        safetyPin.use();
        System.out.println("--------------------------");
        SteelPin steel = new SteelPin();
        steel.secure(basicPin);
        steel.secure(polyPin);
        steel.secure(safetyPin);
        System.out.println("==========================");


        Plaster basicPlaster = new Plaster();
        basicPlaster.apply();
        System.out.println("-------------------------");
        Plaster polyPlaster = new MedicalPlaster();
        polyPlaster.apply();
        System.out.println("-------------------------");
        MedicalPlaster medPlaster = new MedicalPlaster();
        medPlaster.apply();
        System.out.println("-------------------------");
        BandagePlaster bandage = new BandagePlaster();
        bandage.fix(basicPlaster);
        bandage.fix(polyPlaster);
        bandage.fix(medPlaster);
        System.out.println("===========================");


        Sticker basicSticker = new Sticker();
        basicSticker.stick();
        System.out.println("-------------------------");
        Sticker polySticker = new FancySticker();
        polySticker.stick();
        System.out.println("-------------------------");
        FancySticker fancySticker = new FancySticker();
        fancySticker.stick();
        System.out.println("-------------------------");
        StickerTester tester = new StickerTester();
        tester.testSticker(basicSticker);
        tester.testSticker(polySticker);
        tester.testSticker(fancySticker);
        System.out.println("===========================");


        Finger basicFinger = new Finger();
        basicFinger.flex();
        System.out.println("--------------------------");
        Finger polyFinger = new RingFinger();
        polyFinger.flex();
        System.out.println("--------------------------");
        RingFinger ringFinger = new RingFinger();
        ringFinger.flex();
        System.out.println("--------------------------");
        FingerTester tester1 = new FingerTester();
        tester1.testFlex(basicFinger);
        tester1.testFlex(polyFinger);
        tester1.testFlex(ringFinger);
        System.out.println("==========================");

        Nail basicNail = new Nail();
        basicNail.file();
        System.out.println("--------------------------");
        Nail polyNail = new ManicureNail();
        polyNail.file();
        System.out.println("--------------------------");
        ManicureNail manicureNail = new ManicureNail();
        manicureNail.file();
        System.out.println("--------------------------");
        Salon salon = new Salon();
        salon.beautify(basicNail);
        salon.beautify(polyNail);
        salon.beautify(manicureNail);
        System.out.println("==========================");

        Fevikwik normal = new Fevikwik();
        normal.open();
        System.out.println("--------------------------");
        Fevikwik bond = new InstantFevikwik();
        bond.open();
        System.out.println("--------------------------");
        InstantFevikwik fast = new InstantFevikwik();
        fast.open();
        System.out.println("--------------------------");
        FevikwikUse use = new FevikwikUse();
        use.useFevikwik(normal);
        use.useFevikwik(bond);
        use.useFevikwik(fast);
        System.out.println("==========================");

        Led led = new Led();
        led.glow();
        System.out.println("--------------------------");
        Led ledRef = new TubeLed();
        ledRef.glow();
        System.out.println("--------------------------");
        TubeLed tube = new TubeLed();
        tube.glow();
        System.out.println("--------------------------");
        LightOperator operator = new LightOperator();
        operator.operate(led);
        operator.operate(ledRef);
        operator.operate(tube);
        System.out.println("==========================");

        Neck neck = new Neck();
        neck.bend();
        System.out.println("--------------------------");
        Neck stiffRef = new StiffNeck();
        stiffRef.bend();
        System.out.println("--------------------------");
        StiffNeck stiff = new StiffNeck();
        stiff.bend();
        System.out.println("--------------------------");
        NeckTherapist therapist = new NeckTherapist();
        therapist.treat(neck);
        therapist.treat(stiffRef);
        therapist.treat(stiff);
        System.out.println("==========================");

        Earrings earrings = new Earrings();
        earrings.wear();
        System.out.println("--------------------------");
        Earrings ref = new StudEarrings();
        ref.wear();
        System.out.println("--------------------------");
        StudEarrings studs = new StudEarrings();
        studs.wear();
        System.out.println("--------------------------");
        Jeweller jeweller = new Jeweller();
        jeweller.polish(earrings);
        jeweller.polish(ref);
        jeweller.polish(studs);
        System.out.println("==========================");

        Blush blush = new Blush();
        blush.apply();
        System.out.println("--------------------------");
        Blush soft = new CreamBlush();
        soft.apply();
        System.out.println("--------------------------");
        CreamBlush creamy = new CreamBlush();
        creamy.apply();
        System.out.println("--------------------------");
        MakeupArtist artist = new MakeupArtist();
        artist.style(blush);
        artist.style(soft);
        artist.style(creamy);
        System.out.println("==========================");

        Eyeliner basic = new Eyeliner();
        basic.draw();
        System.out.println("--------------------------");
        Eyeliner liquidRef = new LiquidEyeliner();
        liquidRef.draw();
        System.out.println("--------------------------");
        LiquidEyeliner smooth = new LiquidEyeliner();
        smooth.draw();
        System.out.println("--------------------------");
        BeautyExpert expert = new BeautyExpert();
        expert.apply(basic);
        expert.apply(liquidRef);
        expert.apply(smooth);
        System.out.println("==========================");

        Lipstick classic = new Lipstick();
        classic.apply();
        System.out.println("--------------------------");
        Lipstick matteRef = new MatteLipstick();
        matteRef.apply();
        System.out.println("--------------------------");
        MatteLipstick bold = new MatteLipstick();
        bold.apply();
        System.out.println("--------------------------");
        BeautySpecialist specialist = new BeautySpecialist();
        specialist.apply(classic);
        specialist.apply(matteRef);
        specialist.apply(bold);
        System.out.println("==========================");

        Keyboard standard = new Keyboard();
        standard.type();
        System.out.println("--------------------------");
        Keyboard mechRef = new MechanicalKeyboard();
        mechRef.type();
        System.out.println("--------------------------");
        MechanicalKeyboard mech = new MechanicalKeyboard();
        mech.type();
        System.out.println("--------------------------");
        TechEnthusiast enthusiast = new TechEnthusiast();
        enthusiast.useKeyboard(standard);
        enthusiast.useKeyboard(mechRef);
        enthusiast.useKeyboard(mech);
        System.out.println("==========================");

        Mouse mouse = new Mouse();
        mouse.click();
        System.out.println("--------------------------");
        Mouse wirelessRef = new WirelessMouse();
        wirelessRef.click();
        System.out.println("--------------------------");
        WirelessMouse wireless = new WirelessMouse();
        wireless.click();
        System.out.println("--------------------------");
        GadgetUser user = new GadgetUser();
        user.operate(mouse);
        user.operate(wirelessRef);
        user.operate(wireless);
        System.out.println("==========================");

        Curd plain = new Curd();
        plain.eat();
        System.out.println("--------------------------");
        Curd flavoredRef = new FlavoredCurd();
        flavoredRef.eat();
        System.out.println("--------------------------");
        FlavoredCurd sweet = new FlavoredCurd();
        sweet.eat();
        System.out.println("--------------------------");
        CurdEnthusiast lover = new CurdEnthusiast();
        lover.enjoy(plain);
        lover.enjoy(flavoredRef);
        lover.enjoy(sweet);
        System.out.println("==========================");

        Traffic general = new Traffic();
        general.control();
        System.out.println("--------------------------");
        Traffic signalRef = new SignalTraffic();
        signalRef.control();
        System.out.println("--------------------------");
        SignalTraffic signal = new SignalTraffic();
        signal.control();
        System.out.println("--------------------------");
        TrafficPolice police = new TrafficPolice();
        police.manage(general);
        police.manage(signalRef);
        police.manage(signal);
        System.out.println("==========================");

        Foot regular = new Foot();
        regular.move();
        System.out.println("--------------------------");
        Foot bareRef = new BareFoot();
        bareRef.move();
        System.out.println("--------------------------");
        BareFoot bare = new BareFoot();
        bare.move();
        System.out.println("--------------------------");
        TrafficPolice police1 = new TrafficPolice();
        police1.manage(general);
        police1.manage(signalRef);
        police1.manage(signal);
        System.out.println("==========================");

        Leaf leaf = new Leaf();
        leaf.fall();
        System.out.println("--------------------------");
        Leaf greenRef = new GreenLeaf();
        greenRef.fall();
        System.out.println("--------------------------");
        GreenLeaf green = new GreenLeaf();
        green.fall();
        System.out.println("--------------------------");
        Botanist botanist = new Botanist();
        botanist.observe(leaf);
        botanist.observe(greenRef);
        botanist.observe(green);
        System.out.println("==========================");

        Candle candle = new Candle();
        candle.light();
        System.out.println("--------------------------");
        Candle scentedRef = new ScentedCandle();
        scentedRef.light();
        System.out.println("--------------------------");
        ScentedCandle scented = new ScentedCandle();
        scented.light();
        System.out.println("--------------------------");
        InteriorDesigner designer = new InteriorDesigner();
        designer.decorate(candle);
        designer.decorate(scentedRef);
        designer.decorate(scented);
        System.out.println("==========================");

        Mop mop1 = new Mop();
        mop1.clean();
        System.out.println("--------------------------");
        Mop mop2 = new SprayMop();
        mop2.clean();
        System.out.println("--------------------------");
        SprayMop mop3 = new SprayMop();
        mop3.clean();
        System.out.println("--------------------------");
        Housekeeper keeper = new Housekeeper();
        keeper.startCleaning(mop1);
        keeper.startCleaning(mop2);
        keeper.startCleaning(mop3);
        System.out.println("==========================");

        Park park1 = new Park();
        park1.open();
        System.out.println("--------------------------");
        Park park2 = new ThemePark();
        park2.open();
        System.out.println("--------------------------");
        ThemePark park3 = new ThemePark();
        park3.open();
        System.out.println("--------------------------");
        Visitor visitor = new Visitor();
        visitor.explore(park1);
        visitor.explore(park2);
        visitor.explore(park3);
        System.out.println("==========================");

        Match match = new Match();
        match.start();
        System.out.println("--------------------------");
        Match matc = new CricketMatch();
        matc.start();
        System.out.println("--------------------------");
        CricketMatch mat = new CricketMatch();
        mat.start();
        System.out.println("--------------------------");
        MatchManager manager = new MatchManager();
        manager.manageMatch(match);
        manager.manageMatch(matc);
        manager.manageMatch(mat);
        System.out.println("==========================");

        Elevator elevator = new Elevator();
        elevator.move();
        System.out.println("--------------------------");
        Elevator eleva = new SmartElevator();
        eleva.move();
        System.out.println("--------------------------");
        SmartElevator smart = new SmartElevator();
        smart.move();
        System.out.println("--------------------------");
        ElevatorOperator operator1 = new ElevatorOperator();
        operator1.operate(elevator);
        operator1.operate(eleva);
        operator1.operate(smart);
        System.out.println("==========================");

        Clock clock = new Clock();
        clock.showTime();
        System.out.println("--------------------------");
        Clock analog = new WallClock();
        analog.showTime();
        System.out.println("--------------------------");
        WallClock wall = new WallClock();
        wall.showTime();
        System.out.println("--------------------------");
        Timekeeper timekeeper = new Timekeeper();
        timekeeper.displayTime(clock);
        timekeeper.displayTime(analog);
        timekeeper.displayTime(wall);
        System.out.println("==========================");

        Container container = new Container();
        container .store();
        System.out.println("--------------------------");
        Container plastic = new PlasticContainer();
        plastic.store();
        System.out.println("--------------------------");
        PlasticContainer specific = new PlasticContainer();
        specific.store();
        System.out.println("--------------------------");
        StorageManager storageManager = new StorageManager();
        storageManager.manageStorage(container);
        storageManager.manageStorage(plastic);
        storageManager.manageStorage(specific);
        System.out.println("==========================");

        Flask flask = new Flask();
        flask.carry();
        System.out.println("--------------------------");
        Flask thermos = new SteelFlask();
        thermos.carry();
        System.out.println("--------------------------");
        SteelFlask hot = new SteelFlask();
        hot.carry();
        System.out.println("--------------------------");
        FlaskManager flaskManager = new FlaskManager();
        flaskManager.manageFlask(flask);
        flaskManager.manageFlask(thermos);
        flaskManager.manageFlask(hot);
        System.out.println("==========================");

        Hair generic = new Hair();
        generic.style();
        System.out.println("--------------------------");
        Hair curly = new CurlyHair();
        curly.style();
        System.out.println("--------------------------");
        CurlyHair natural = new CurlyHair();
        natural.style();
        System.out.println("--------------------------");
        HairStylist stylist = new HairStylist();
        stylist.styleHair(generic);
        stylist.styleHair(curly);
        stylist.styleHair(natural);
        System.out.println("==========================");

        Rod rod = new Rod();
        rod.support();
        System.out.println("--------------------------");
        Rod iron = new IronRod();
        iron.support();
        System.out.println("--------------------------");
        IronRod strong = new IronRod();
        strong.support();
        System.out.println("--------------------------");
        RodHandler rodHandler = new RodHandler();
        rodHandler.handle(rod);
        rodHandler.handle(iron);
        rodHandler.handle(strong);
        System.out.println("==========================");

        Oven oven = new Oven();
        oven.heat();
        System.out.println("--------------------------");
        Oven quick = new MicrowaveOven();
        quick.heat();
        System.out.println("--------------------------");
        MicrowaveOven mw = new MicrowaveOven();
        mw.heat();
        System.out.println("--------------------------");
        OvenHandler ovenHandler = new OvenHandler();
        ovenHandler.handle(oven);
        ovenHandler.handle(quick);
        ovenHandler.handle(mw);
        System.out.println("==========================");

        Fork fork = new Fork();
        fork.pick();
        System.out.println("--------------------------");
        Fork stainless = new SteelFork();
        stainless.pick();
        System.out.println("--------------------------");
        SteelFork shiny = new SteelFork();
        shiny.pick();
        System.out.println("--------------------------");
        ForkHandler forkHandler = new ForkHandler();
        forkHandler.handle(fork);
        forkHandler.handle(stainless);
        forkHandler.handle(shiny);
        System.out.println("==========================");

        Kit kit = new Kit();
        kit.open();
        System.out.println("--------------------------");
        Kit aid = new FirstAidKit();
        aid.open();
        System.out.println("--------------------------");
        FirstAidKit medical = new FirstAidKit();
        medical.open();
        System.out.println("--------------------------");
        KitInspector inspector = new KitInspector();
        inspector.inspect(kit);
        inspector.inspect(aid);
        inspector.inspect(medical);
        System.out.println("==========================");

        Spoon spoon = new Spoon();
        spoon.scoop();
        System.out.println("--------------------------");
        Spoon fancy = new SilverSpoon();
        fancy.scoop();
        System.out.println("--------------------------");
        SilverSpoon shine = new SilverSpoon();
        shine.scoop();
        System.out.println("--------------------------");
        SpoonTester test = new SpoonTester();
        test.test(spoon);
        test.test(fancy);
        test.test(shine);
        System.out.println("==========================");

        WaterCanal mainCanal = new WaterCanal();
        mainCanal.flow();
        System.out.println("--------------------------");
        WaterCanal branchCanal = new IrrigationCanal();
        branchCanal.flow();
        System.out.println("--------------------------");
        IrrigationCanal irrigation = new IrrigationCanal();
        irrigation.flow();
        System.out.println("--------------------------");
        CanalMonitor monitor = new CanalMonitor();
        monitor.observe(mainCanal);
        monitor.observe(branchCanal);
        monitor.observe(irrigation);
        System.out.println("==========================");

        Straightner straightner = new Straightner();
        straightner.heat();
        System.out.println("--------------------------");
        Straightner salon1 = new HairStraightner();
        salon1.heat();
        System.out.println("--------------------------");
        HairStraightner advanced = new HairStraightner();
        advanced.heat();
        System.out.println("--------------------------");
        SalonService saloon = new SalonService();
        saloon.use(straightner);
        saloon.use(salon1);
        saloon.use(advanced);
        System.out.println("==========================");

        Moisturizer moisturizer = new Moisturizer();
        moisturizer.apply();
        System.out.println("--------------------------");
        Moisturizer facial = new FaceMoisturizer();
        facial.apply();
        System.out.println("--------------------------");
        FaceMoisturizer faceCare = new FaceMoisturizer();
        faceCare.apply();
        System.out.println("--------------------------");
        MoisturizerHandler mHandler = new MoisturizerHandler();
        mHandler.handle(moisturizer);
        mHandler.handle(facial);
        mHandler.handle(faceCare);
        System.out.println("==========================");

        Tent tent = new Tent();
        tent.setUp();
        System.out.println("--------------------------");
        Tent travel = new CampingTent();
        travel.setUp();
        System.out.println("--------------------------");
        CampingTent hiking = new CampingTent();
        hiking.setUp();
        System.out.println("--------------------------");
        TentHandler tHandler = new TentHandler();
        tHandler.handle(tent);
        tHandler.handle(travel);
        tHandler.handle(hiking);
        System.out.println("==========================");

        Pendrive pendrive= new Pendrive();
        pendrive.store();
        System.out.println("--------------------------");
        Pendrive pendrive1 = new SandiskPendrive();
        pendrive1.store();
        System.out.println("--------------------------");
        SandiskPendrive sandisk = new SandiskPendrive();
        sandisk.store();
        System.out.println("--------------------------");
        PendriveHandler pHandler = new PendriveHandler();
        pHandler.handle(pendrive);
        pHandler.handle(pendrive1);
        pHandler.handle(sandisk);
        System.out.println("==========================");


        Stepler  stepler= new Stepler();
        stepler.bind();
        System.out.println("--------------------------");
        Stepler industrial = new HeavyStepler();
        industrial.bind();
        System.out.println("--------------------------");
        HeavyStepler heavy = new HeavyStepler();
        heavy.bind();
        System.out.println("--------------------------");
        PaperBinder binder = new PaperBinder();
        binder.bindPapers(stepler);
        binder.bindPapers(industrial);
        binder.bindPapers(heavy);
        System.out.println("==========================");

        Mic corded = new Mic();
        corded.record();
        System.out.println("--------------------------");
        Mic bluetooth = new WirelessMic();
        bluetooth.record();
        System.out.println("--------------------------");
        WirelessMic collarMic = new WirelessMic();
        collarMic.record();
        System.out.println("--------------------------");
        AudioHandler handler = new AudioHandler();
        handler.handleMic(corded);
        handler.handleMic(bluetooth);
        handler.handleMic(collarMic);
        System.out.println("==========================");

        PowerBank power = new PowerBank();
        power.charge();
        System.out.println("--------------------------");
        PowerBank turbo = new FastChargePowerBank();
        turbo.charge();
        System.out.println("--------------------------");
        FastChargePowerBank miPower = new FastChargePowerBank();
        miPower.charge();
        System.out.println("--------------------------");
        ChargingStation station = new ChargingStation();
        station.chargeDevice(power);
        station.chargeDevice(turbo);
        station.chargeDevice(miPower);
        System.out.println("==========================");

        Adopter wallAdapter = new Adopter();
        wallAdapter.connect();
        System.out.println("--------------------------");
        Adopter usbTypeC = new USBAdopter();
        usbTypeC.connect();
        System.out.println("--------------------------");
        USBAdopter fastAdapter = new USBAdopter();
        fastAdapter.connect();
        System.out.println("--------------------------");
        connectAdapter demo = new connectAdapter();
        demo.connect(wallAdapter);
        demo.connect(usbTypeC);
        demo.connect(fastAdapter);
        System.out.println("==========================");

        Charger wired = new Charger();
        wired.supply();
        System.out.println("--------------------------");
        Charger charger = new WirelessCharger();
        charger.supply();
        System.out.println("--------------------------");
        WirelessCharger pixelStand = new WirelessCharger();
        pixelStand.supply();
        System.out.println("--------------------------");
        ChargerHandler charge=new ChargerHandler();
        charge.handleCharger(wired );
        charge.handleCharger(charger);
        charge.handleCharger(pixelStand );
        System.out.println("==========================");

        Skin skin = new Skin();
        skin.protect();
        System.out.println("--------------------------");
        Skin sensitive = new DrySkin();
        sensitive.protect();
        System.out.println("--------------------------");
        DrySkin winterSkin = new DrySkin();
        winterSkin.protect();
        System.out.println("--------------------------");
        SkinCare care=new SkinCare();
        care.handleSkin(skin);
        care.handleSkin(sensitive);
        care.handleSkin(winterSkin);
        System.out.println("==========================");

        Mug ceramic = new Mug();
        ceramic.hold();
        System.out.println("--------------------------");
        Mug branded = new CoffeeMug();
        branded.hold();
        System.out.println("--------------------------");
        CoffeeMug officeMug = new CoffeeMug();
        officeMug.hold();
        System.out.println("--------------------------");
        MugType  type=new MugType();
        type.handleMug(ceramic);
        type.handleMug(branded);
        type.handleMug(officeMug);
        System.out.println("==========================");

        SandSwitch sand = new SandSwitch();
        sand.serve();
        System.out.println("--------------------------");
        SandSwitch grilled = new GrilledSandSwitch();
        grilled.serve();
        System.out.println("--------------------------");
        GrilledSandSwitch panini = new GrilledSandSwitch();
        panini.serve();
        System.out.println("--------------------------");
        ServiceSandwitch sandwitch = new ServiceSandwitch();
        sandwitch.serve(sand);
        sandwitch.serve(grilled);
        sandwitch.serve(panini);
        System.out.println("==========================");

        Monitor monitor1 = new Monitor();
        monitor1.display();
        System.out.println("--------------------------");
        Monitor slim = new LedMonitor();
        slim.display();
        System.out.println("--------------------------");
        LedMonitor dell = new LedMonitor();
        dell.display();
        System.out.println("--------------------------");
        MonitorService monitorService = new MonitorService();
        monitorService.showMonitorDetails(monitor1);
        monitorService.showMonitorDetails(slim);
        monitorService.showMonitorDetails(dell);
        System.out.println("==========================");

        Scooty tvs = new Scooty();
        tvs.ride();
        System.out.println("--------------------------");
        Scooty ola = new ElectricScooty();
        ola.ride();
        System.out.println("--------------------------");
        ElectricScooty ather = new ElectricScooty();
        ather.ride();
        System.out.println("--------------------------");
        PetrolScooty service = new PetrolScooty();
        service.road(tvs);
        service.road(ola);
        service.road(ather);
        System.out.println("==========================");

        Stove prestige = new Stove();
        prestige.ignite();
        System.out.println("--------------------------");
        Stove butterfly = new Gasstove();
        butterfly.ignite();
        System.out.println("--------------------------");
        Gasstove sunflame = new Gasstove();
        sunflame.ignite();
        System.out.println("--------------------------");
        StoveBurn stoveService = new StoveBurn();
        stoveService.useStove(prestige);
        stoveService.useStove(butterfly);
        stoveService.useStove(sunflame);
        System.out.println("==========================");

        Canister can = new Canister();
        can.store();
        System.out.println("--------------------------");
        Canister petrol = new FuelCanister();
        petrol.store();
        System.out.println("--------------------------");
        FuelCanister diesel = new FuelCanister();
        diesel.store();
        System.out.println("--------------------------");
        StoreCanister store=new StoreCanister();
        store.store(can);
        store.store(petrol);
        store.store(diesel);
        System.out.println("==========================");

        Censer clay = new Censer();
        clay.releaseFragrance();
        System.out.println("--------------------------");
        Censer auto = new ElectricCenser();
        auto.releaseFragrance();
        System.out.println("--------------------------");
        ElectricCenser smart1 = new ElectricCenser();
        smart1.releaseFragrance();
        System.out.println("--------------------------");
        CenserHandler handle = new CenserHandler();
        handle.handleCenser(clay);
        handle.handleCenser(auto);
        handle.handleCenser(smart1);
        System.out.println("==========================");

        Blanket wool = new Blanket();
        wool.cover();
        System.out.println("--------------------------");
        Blanket blank = new ElectricBlanket();
        blank.cover();
        System.out.println("--------------------------");
        ElectricBlanket cozy = new ElectricBlanket();
        cozy.cover();
        System.out.println("--------------------------");
        SleepAssistant assistant = new SleepAssistant();
        assistant.prepareSleep(wool);
        assistant.prepareSleep(blank);
        assistant.prepareSleep(cozy);
        System.out.println("==========================");

        Rug cotton = new Rug();
        cotton.spread();
        System.out.println("--------------------------");
        Rug rug = new SilkRug();
        rug.spread();
        System.out.println("--------------------------");
        SilkRug silk = new SilkRug();
        silk.spread();
        System.out.println("--------------------------");
        InteriorDecorator decorator = new InteriorDecorator();
        decorator.arrangeRug(cotton);
        decorator.arrangeRug(rug);
        decorator.arrangeRug(silk);
        System.out.println("==========================");

        Pitcher steel1 = new Pitcher();
        steel1.pour();
        System.out.println("--------------------------");
        Pitcher matka = new ClayPitcher();
        matka.pour();
        System.out.println("--------------------------");
        ClayPitcher earthen = new ClayPitcher();
        earthen.pour();
        System.out.println("--------------------------");
        WaterUtility utility = new WaterUtility();
        utility.serveWater(steel1);
        utility.serveWater(matka);
        utility.serveWater(earthen);
        System.out.println("==========================");

        Cradle basicCradle = new Cradle();
        basicCradle.rock();
        System.out.println("--------------------------");
        Cradle woodenCradle = new WoodenCradle();
        woodenCradle.rock();
        System.out.println("--------------------------");
        WoodenCradle premiumCradle = new WoodenCradle();
        premiumCradle.rock();
        System.out.println("--------------------------");
        NurserySetup setup = new NurserySetup();
        setup.arrangeCradle(basicCradle);
        setup.arrangeCradle(woodenCradle);
        setup.arrangeCradle(premiumCradle);
        System.out.println("==========================");

        Pincer basicPincer = new Pincer();
        basicPincer.grip();
        System.out.println("--------------------------");
        Pincer sharpPincer = new MetalPincer();
        sharpPincer.grip();
        System.out.println("--------------------------");
        MetalPincer durablePincer = new MetalPincer();
        durablePincer.grip();
        System.out.println("--------------------------");
        ToolKit kit1 = new ToolKit();
        kit1.checkTool(basicPincer);
        kit1.checkTool(sharpPincer);
        kit1.checkTool(durablePincer);
        System.out.println("==========================");

        Flagon basicFlagon = new Flagon();
        basicFlagon.hold();
        System.out.println("--------------------------");
        Flagon ceramicFlagon = new CeramicFlagon();
        ceramicFlagon.hold();
        System.out.println("--------------------------");
        CeramicFlagon elegantFlagon = new CeramicFlagon();
        elegantFlagon.hold();
        System.out.println("--------------------------");
        UtilityKit utilityKit = new UtilityKit();
        utilityKit.checkItem(basicFlagon);
        utilityKit.checkItem(ceramicFlagon);
        utilityKit.checkItem(elegantFlagon);
        System.out.println("==========================");

        JossStick regularStick = new JossStick();
        regularStick.burn();
        System.out.println("--------------------------");
        JossStick incenseStick = new IncenseJossStick();
        incenseStick.burn();
        System.out.println("--------------------------");
        IncenseJossStick scentedStick = new IncenseJossStick();
        scentedStick.burn();
        System.out.println("--------------------------");
        StickHandler handler1 = new StickHandler();
        handler1.checkItem(regularStick);
        handler1.checkItem(incenseStick);
        handler1.checkItem(scentedStick);
        System.out.println("==========================");

        Spitton regularSpitton = new Spitton();
        regularSpitton.use();
        System.out.println("--------------------------");
        Spitton metalSpitton = new MetalSpitton();
        metalSpitton.use();
        System.out.println("--------------------------");
        MetalSpitton advancedSpitton = new MetalSpitton();
        advancedSpitton.use();
        System.out.println("--------------------------");
        SpittonUse spitton = new SpittonUse();
        spitton.use(regularSpitton);
        spitton.use(metalSpitton);
        spitton.use(advancedSpitton);
        System.out.println("==========================");

        Chandelier regularChandelier = new Chandelier();
        regularChandelier.illuminate();
        System.out.println("--------------------------");
        Chandelier crystalChandelier = new CrystalChandelier();
        crystalChandelier.illuminate();
        System.out.println("--------------------------");
        CrystalChandelier fancyChandelier = new CrystalChandelier();
        fancyChandelier.illuminate();
        System.out.println("--------------------------");
        DecorUtility decor=new DecorUtility();
        decor.apply(regularChandelier);
        decor.apply(crystalChandelier);
        decor.apply(fancyChandelier );
        System.out.println("==========================");

        Tong regularTong = new Tong();
        regularTong.grip();
        System.out.println("--------------------------");
        Tong cookingTong = new CookingTong();
        cookingTong.grip();
        System.out.println("--------------------------");
        CookingTong specializedTong = new CookingTong();
        specializedTong.grip();
        System.out.println("--------------------------");
        TongCare caring = new TongCare();
        caring.handleTong(regularTong);
        caring.handleTong(cookingTong);
        caring.handleTong(specializedTong);
        System.out.println("==========================");

        Mixture regularMixture = new Mixture();
        regularMixture.mix();
        System.out.println("--------------------------");
        Mixture spiceMixture = new SpiceMixture();
        spiceMixture.mix();
        System.out.println("--------------------------");
        SpiceMixture spicyMixture = new SpiceMixture();
        spicyMixture.mix();
        System.out.println("--------------------------");
        MixtureGrind grind = new MixtureGrind();
        grind.handleMixture(regularMixture);
        grind.handleMixture(spiceMixture);
        grind.handleMixture(spicyMixture);

        System.out.println("==========================");

        Cylinder regularCylinder = new Cylinder();
        regularCylinder.rotate();
        System.out.println("--------------------------");
        Cylinder hollowCylinder = new HollowCylinder();
        hollowCylinder.rotate();
        System.out.println("--------------------------");
        HollowCylinder specialHollowCylinder = new HollowCylinder();
        specialHollowCylinder.rotate();
        System.out.println("--------------------------");
        CylinderGas gas = new CylinderGas();
        gas.handleCylinder(regularCylinder);
        gas.handleCylinder(hollowCylinder);
        gas.handleCylinder(specialHollowCylinder);
        System.out.println("==========================");

        Lid regularLid = new Lid();
        regularLid.cover();
        System.out.println("--------------------------");
        Lid plasticLid = new PlasticLid();
        plasticLid.cover();
        System.out.println("--------------------------");
        PlasticLid specializedPlasticLid = new PlasticLid();
        specializedPlasticLid.cover();
        System.out.println("--------------------------");
        LidThing thing = new LidThing();
        thing.handleLid(regularLid);
        thing.handleLid(plasticLid);
        thing.handleLid(specializedPlasticLid);
        System.out.println("==========================");

        Cauldron regularCauldron = new Cauldron();
        regularCauldron.boil();
        System.out.println("--------------------------");
        Cauldron ironCauldron = new IronCauldron();
        ironCauldron.boil();
        System.out.println("--------------------------");
        IronCauldron specializedIronCauldron = new IronCauldron();
        specializedIronCauldron.boil();
        System.out.println("--------------------------");
        CauldronUtility cauldron = new CauldronUtility();
        cauldron.handleCauldron(regularCauldron);
        cauldron.handleCauldron(ironCauldron);
        cauldron.handleCauldron(specializedIronCauldron);
        System.out.println("==========================");

        Fire regularFire = new Fire();
        regularFire.ignite();
        System.out.println("--------------------------");
        Fire campfire = new Campfire();
        campfire.ignite();
        System.out.println("--------------------------");
        Campfire specialCampfire = new Campfire();
        specialCampfire.ignite();
        System.out.println("--------------------------");
        FireDenger fireCare = new FireDenger();
        fireCare.handleFire(regularFire);
        fireCare.handleFire(campfire);
        fireCare.handleFire(specialCampfire);
        System.out.println("==========================");

        Fog regularFog = new Fog();
        regularFog.appear();
        System.out.println("--------------------------");
        Fog morningFog = new MorningFog();
        morningFog.appear();
        System.out.println("--------------------------");
        MorningFog specialMorningFog = new MorningFog();
        specialMorningFog.appear();
        System.out.println("--------------------------");
        FogClimate climate=new  FogClimate();
       climate.handle(regularFog);
        climate.handle(morningFog);
        climate.handle(specialMorningFog);
        System.out.println("==========================");

        Pan regularPan = new Pan();
        regularPan.cook();
        System.out.println("--------------------------");
        Pan fryingPan = new FryingPan();
        fryingPan.cook();
        System.out.println("--------------------------");
        FryingPan specialFryingPan = new FryingPan();
        specialFryingPan.cook();
        System.out.println("--------------------------");
        PanCook cookHandler = new PanCook();
        cookHandler.cook(regularPan);
        cookHandler.cook(fryingPan);
        cookHandler.cook(specialFryingPan);
        System.out.println("==========================");

        Platter regularPlatter = new Platter();
        regularPlatter.serve();
        System.out.println("--------------------------");
        Platter dinnerPlatter = new DinnerPlatter();
        dinnerPlatter.serve();
        System.out.println("--------------------------");
        DinnerPlatter specialDinnerPlatter = new DinnerPlatter();
        specialDinnerPlatter.serve();
        System.out.println("--------------------------");
        PlatterServe serveHandler = new PlatterServe();
        serveHandler.serveFood(regularPlatter);
        serveHandler.serveFood(dinnerPlatter);
        serveHandler.serveFood(specialDinnerPlatter);
        System.out.println("==========================");

        RollerPin regularRollerPin = new RollerPin();
        regularRollerPin.roll();
        System.out.println("--------------------------");
        RollerPin woodenRollerPin = new WoodenRollerPin();
        woodenRollerPin.roll();
        System.out.println("--------------------------");
        WoodenRollerPin specialWoodenRollerPin = new WoodenRollerPin();
        specialWoodenRollerPin.roll();
        System.out.println("--------------------------");
        RollerService rollerService = new RollerService();
        rollerService.useRoller(regularRollerPin);
        rollerService.useRoller(woodenRollerPin);
        rollerService.useRoller(specialWoodenRollerPin);
        System.out.println("==========================");

        Spice regularSpice = new Spice();
        regularSpice.flavor();
        System.out.println("--------------------------");
        Spice chiliSpice = new ChiliSpice();
        chiliSpice.flavor();
        System.out.println("--------------------------");
        ChiliSpice specialChiliSpice = new ChiliSpice();
        specialChiliSpice.flavor();
        System.out.println("--------------------------");
        SpiceTaster taster = new SpiceTaster();
        taster.testFlavor(regularSpice);
        taster.testFlavor(chiliSpice);
        taster.testFlavor(specialChiliSpice);
        System.out.println("==========================");

        Ginger regularGinger = new Ginger();
        regularGinger.flavor();
        System.out.println("--------------------------");
        Ginger garlicGinger = new GarlicGinger();
        garlicGinger.flavor();
        System.out.println("--------------------------");
        GarlicGinger specialGarlicGinger = new GarlicGinger();
        specialGarlicGinger.flavor();
        System.out.println("--------------------------");
        GingerMixer mixer = new GingerMixer();
        mixer.mix(regularGinger);
        mixer.mix(garlicGinger);
        mixer.mix(specialGarlicGinger);
        System.out.println("==========================");

        Chopper regularChopper = new Chopper();
        regularChopper.chop();
        System.out.println("--------------------------");
        Chopper vegetableChopper = new VegetableChopper();
        vegetableChopper.chop();
        System.out.println("--------------------------");
        VegetableChopper specialVegetableChopper = new VegetableChopper();
        specialVegetableChopper.chop();
        System.out.println("--------------------------");
        ChopperWork work = new ChopperWork();
        work.processChop(regularChopper);
        work.processChop(vegetableChopper);
        work.processChop(specialVegetableChopper);
        System.out.println("==========================");

        Turmeric regularTurmeric = new Turmeric();
        regularTurmeric.flavor();
        System.out.println("--------------------------");
        Turmeric curcuminTurmeric = new CurcuminTurmeric();
        curcuminTurmeric.flavor();
        System.out.println("--------------------------");
        CurcuminTurmeric specialCurcuminTurmeric = new CurcuminTurmeric();
        specialCurcuminTurmeric.flavor();
        System.out.println("--------------------------");
        TurmericTester teste = new TurmericTester();
        teste.testFlavor(regularTurmeric);
        teste.testFlavor(curcuminTurmeric);
        teste.testFlavor(specialCurcuminTurmeric);
        System.out.println("==========================");

        Cardamom regularCardamom = new Cardamom();
        regularCardamom.aroma();
        System.out.println("--------------------------");
        Cardamom greenCardamom = new GreenCardamom();
        greenCardamom.aroma();
        System.out.println("--------------------------");
        GreenCardamom specialGreenCardamom = new GreenCardamom();
        specialGreenCardamom.aroma();
        System.out.println("--------------------------");
        CardamomSpice Spice = new CardamomSpice();
        Spice.processCardamom(regularCardamom);
        Spice.processCardamom(greenCardamom);
        Spice.processCardamom(specialGreenCardamom);
        System.out.println("==========================");

        Pepper regularPepper = new Pepper();
        regularPepper.spice();
        System.out.println("--------------------------");
        Pepper blackPepper = new BlackPepper();
        blackPepper.spice();
        System.out.println("--------------------------");
        BlackPepper specialBlackPepper = new BlackPepper();
        specialBlackPepper.spice();
        System.out.println("--------------------------");
        PepperRecipe handl = new PepperRecipe();
        handl.handle(regularPepper);
        handl.handle(blackPepper);
        handl.handle(specialBlackPepper);
        System.out.println("==========================");

        Jar regularJar = new Jar();
        regularJar.store();
        System.out.println("--------------------------");
        Jar glassJar = new GlassJar();
        glassJar.store();
        System.out.println("--------------------------");
        GlassJar specialGlassJar = new GlassJar();
        specialGlassJar.store();
        System.out.println("--------------------------");
        JarUtil util = new JarUtil();
        util.handleJar(regularJar);
        util.handleJar(glassJar);
        util.handleJar(specialGlassJar);
        System.out.println("==========================");

        Wok regularWok = new Wok();
        regularWok.cook();
        System.out.println("--------------------------");
        Wok stainlessSteelWok = new StainlessSteelWok();
        stainlessSteelWok.cook();
        System.out.println("--------------------------");
        StainlessSteelWok specialWok = new StainlessSteelWok();
        specialWok.cook();
        System.out.println("--------------------------");
        WokUtil util1 = new WokUtil();
        util1.handleWok(regularWok);
        util1.handleWok(stainlessSteelWok);
        util1.handleWok(specialWok);
        System.out.println("==========================");

        Whisk regularWhisk = new Whisk();
        regularWhisk.mix();
        System.out.println("--------------------------");
        Whisk electricWhisk = new ElectricWhisk();
        electricWhisk.mix();
        System.out.println("--------------------------");
        ElectricWhisk specialElectricWhisk = new ElectricWhisk();
        specialElectricWhisk.mix();
        System.out.println("--------------------------");
        ElectricWhiskMaterial whiskHandler = new ElectricWhiskMaterial();
        whiskHandler.handle(regularWhisk);
        whiskHandler.handle(electricWhisk);
        whiskHandler.handle(specialElectricWhisk);
        System.out.println("==========================");

        Masher regularMasher = new Masher();
        regularMasher.mash();
        System.out.println("--------------------------");
        Masher potatoMasher = new PotatoMasher();
        potatoMasher.mash();
        System.out.println("--------------------------");
        PotatoMasher specialPotatoMasher = new PotatoMasher();
        specialPotatoMasher.mash();
        System.out.println("--------------------------");
        PotatoMasherCurry masherHandler = new PotatoMasherCurry();
        masherHandler.handle(regularMasher);
        masherHandler.handle(potatoMasher);
        masherHandler.handle(specialPotatoMasher);
        System.out.println("==========================");

        Frog regularFrog = new Frog();
        regularFrog.jump();
        System.out.println("--------------------------");
        Frog treeFrog = new TreeFrog();
        treeFrog.jump();
        System.out.println("--------------------------");
        TreeFrog specialTreeFrog = new TreeFrog();
        specialTreeFrog.jump();
        System.out.println("--------------------------");
        TreeFrogAnimal frogHandler = new TreeFrogAnimal();
        frogHandler.handle(regularFrog );
        frogHandler.handle(treeFrog);
        frogHandler.handle(specialTreeFrog);
        System.out.println("==========================");

        Root rootObj = new Root();
        rootObj.grow();
        System.out.println("--------------------------");
        Root treeObj = new Tree();
        treeObj.grow();
        System.out.println("--------------------------");
        Tree specificTree = new Tree();
        specificTree.grow();
        System.out.println("--------------------------");
        TreePart part = new TreePart();
        part.handle(rootObj);
        part.handle(treeObj );
        part.handle(specificTree);
        System.out.println("==========================");

        Desert generalDesert = new Desert();
        generalDesert.climate();
        System.out.println("--------------------------");
        Desert sandyDesert = new SandyDesert();
        sandyDesert.climate();
        System.out.println("--------------------------");
        SandyDesert specificSandyDesert = new SandyDesert();
        specificSandyDesert.climate();
        System.out.println("--------------------------");
        DesertSoil soil = new DesertSoil();
        soil.Soil(generalDesert);
        soil.Soil(sandyDesert);
        soil.Soil(specificSandyDesert);
        System.out.println("==========================");

        Steel steelObj = new Steel();
        steelObj.strength();
        System.out.println("--------------------------");
        Steel stainlessSteelObj = new StainlessSteel();
        stainlessSteelObj.strength();
        System.out.println("--------------------------");
        StainlessSteel specificStainlessSteel = new StainlessSteel();
        specificStainlessSteel.strength();
        System.out.println("--------------------------");
        MetalQuality metalQuality = new MetalQuality();
        metalQuality.checkQuality(steelObj);
        metalQuality.checkQuality(stainlessSteelObj);
        metalQuality.checkQuality(specificStainlessSteel);
        System.out.println("==========================");

        Copper copperObj = new Copper();
        copperObj.conductivity();
        System.out.println("--------------------------");
        Copper pureCopperObj = new PureCopper();
        pureCopperObj.conductivity();
        System.out.println("--------------------------");
        PureCopper specificPureCopper = new PureCopper();
        specificPureCopper.conductivity();
        System.out.println("--------------------------");
        CopperQuality quality=new CopperQuality();
        quality.checkQuality(copperObj);
        quality.checkQuality(pureCopperObj);
        quality.checkQuality(specificPureCopper);
        System.out.println("==========================");

        Window windowObj = new Window();
        windowObj.open();
        System.out.println("--------------------------");
        Window glassWindowObj = new GlassWindow();
        glassWindowObj.open();
        System.out.println("--------------------------");
        GlassWindow specificGlassWindow = new GlassWindow();
        specificGlassWindow.open();
        System.out.println("--------------------------");
        WindowHandler windowHandler = new WindowHandler();
        windowHandler.handleWindow(windowObj);
        windowHandler.handleWindow(glassWindowObj);
        windowHandler.handleWindow(specificGlassWindow);
        System.out.println("==========================");

        Rapper rapperObj = new Rapper();
        rapperObj.perform();
        System.out.println("--------------------------");
        Rapper hipHopRapperObj = new HipHopRapper();
        hipHopRapperObj.perform();
        System.out.println("--------------------------");
        HipHopRapper specificHipHopRapper = new HipHopRapper();
        specificHipHopRapper.perform();
        System.out.println("--------------------------");
        RapperPerformance rapperPerformance = new RapperPerformance();
        rapperPerformance.handlePerformance(rapperObj);
        rapperPerformance.handlePerformance(hipHopRapperObj);
        rapperPerformance.handlePerformance(specificHipHopRapper);
        System.out.println("==========================");

        Handle handleObj = new Handle();
        handleObj.turn();
        System.out.println("--------------------------");
        Handle doorHandleObj = new DoorHandle();
        doorHandleObj.turn();
        System.out.println("--------------------------");
        DoorHandle specificDoorHandle = new DoorHandle();
        specificDoorHandle.turn();
        System.out.println("--------------------------");
        HandleHandler handleHandler = new HandleHandler();
        handleHandler.manageHandle(handleObj);
        handleHandler.manageHandle(doorHandleObj);
        handleHandler.manageHandle(specificDoorHandle);
        System.out.println("==========================");

        Screen screenObj = new Screen();
        screenObj.display();
        System.out.println("--------------------------");
        Screen touchScreenObj = new TouchScreen();
        touchScreenObj.display();
        System.out.println("--------------------------");
        TouchScreen specificTouchScreen = new TouchScreen();
        specificTouchScreen.display();
        specificTouchScreen.touch();
        System.out.println("--------------------------");
        ScreenHandler screenHandler = new ScreenHandler();
        screenHandler.manageScreen(screenObj);
        screenHandler.manageScreen(touchScreenObj);
        screenHandler.manageScreen(specificTouchScreen);
        System.out.println("==========================");

        Ant antObj = new Ant();
        antObj.work();
        System.out.println("--------------------------");
        Ant workerAntObj = new WorkerAnt();
        workerAntObj.work();
        System.out.println("--------------------------");
        WorkerAnt specificWorkerAnt = new WorkerAnt();
        specificWorkerAnt.work();
        specificWorkerAnt.dig();
        System.out.println("--------------------------");
        AntHandler antHandler = new AntHandler();
        antHandler.manageAnt(antObj);
        antHandler.manageAnt(workerAntObj);
        antHandler.manageAnt(specificWorkerAnt);
        System.out.println("==========================");

        Syntax syntaxObj = new Syntax();
        syntaxObj.explain();
        System.out.println("--------------------------");
        Syntax programmingSyntaxObj = new ProgrammingSyntax();
        programmingSyntaxObj.explain();
        System.out.println("--------------------------");
        ProgrammingSyntax specificProgrammingSyntax = new ProgrammingSyntax();
        specificProgrammingSyntax.explain();
        specificProgrammingSyntax.examples();
        System.out.println("--------------------------");
        SyntaxHandle syntaxHandler = new SyntaxHandle();
        syntaxHandler.manageSyntax(syntaxObj);
        syntaxHandler.manageSyntax(programmingSyntaxObj);
        syntaxHandler.manageSyntax(specificProgrammingSyntax);
        System.out.println("==========================");

        Zoo zooObj = new Zoo();
        zooObj.exhibitAnimals();
        System.out.println("--------------------------");
        Zoo safariZooObj = new SafariZoo();
        safariZooObj.exhibitAnimals();
        System.out.println("--------------------------");
        SafariZoo specificSafariZoo = new SafariZoo();
        specificSafariZoo.exhibitAnimals();
        specificSafariZoo.safariRide();
        System.out.println("--------------------------");
        ZooHandler zooHandler = new ZooHandler();
        zooHandler.manageZoo(zooObj);
        zooHandler.manageZoo(safariZooObj);
        zooHandler.manageZoo(specificSafariZoo);
        System.out.println("==========================");

        Sundisk sundiskObj = new Sundisk();
        sundiskObj.storeData();
        System.out.println("--------------------------");
        Sundisk flashSundiskObj = new FlashSundisk();
        flashSundiskObj.storeData();
        System.out.println("--------------------------");
        FlashSundisk specificFlashSundisk = new FlashSundisk();
        specificFlashSundisk.storeData();
        specificFlashSundisk.fastReadWrite();
        System.out.println("--------------------------");
        SundiskHandler sundiskHandler = new SundiskHandler();
        sundiskHandler.manageDisk(sundiskObj);
        sundiskHandler.manageDisk(flashSundiskObj);
        sundiskHandler.manageDisk(specificFlashSundisk);
        System.out.println("==========================");

        Route routeObj = new Route();
        routeObj.planRoute();
        System.out.println("--------------------------");
        Route advancedRouteObj = new AdvancedRoute();
        advancedRouteObj.planRoute();
        System.out.println("--------------------------");
        AdvancedRoute specificAdvancedRoute = new AdvancedRoute();
        specificAdvancedRoute.planRoute();
        specificAdvancedRoute.addScenicRoute();
        System.out.println("--------------------------");
        RouteHandler routeHandler = new RouteHandler();
        routeHandler.handleRoute(routeObj);
        routeHandler.handleRoute(advancedRouteObj);
        routeHandler.handleRoute(specificAdvancedRoute);
        System.out.println("==========================");

        Lizard lizardObj = new Lizard();
        lizardObj.makeSound();
        System.out.println("--------------------------");
        Lizard geckoObj = new Gecko();
        geckoObj.makeSound();
        System.out.println("--------------------------");
        Gecko specificGecko = new Gecko();
        specificGecko.makeSound();
        specificGecko.changeColor();
        System.out.println("--------------------------");
        LizardHandler lizardHandler = new LizardHandler();
        lizardHandler.handleLizard(lizardObj);
        lizardHandler.handleLizard(geckoObj);
        lizardHandler.handleLizard(specificGecko);
        System.out.println("==========================");

        Stage stageObj = new Stage();
        stageObj.setupStage();
        stageObj.showPerformance();
        System.out.println("--------------------------");
        Stage concertStageObj = new ConcertStage();
        concertStageObj.setupStage();
        concertStageObj.showPerformance();
        System.out.println("--------------------------");
        ConcertStage specificConcertStage = new ConcertStage();
        specificConcertStage.setupStage();
        specificConcertStage.showPerformance();
        specificConcertStage.arrangeSeating();
        System.out.println("--------------------------");
        StageHandler stageHandler = new StageHandler();
        stageHandler.handleStage(stageObj);
        stageHandler.handleStage(concertStageObj);
        stageHandler.handleStage(specificConcertStage);
        System.out.println("==========================");

        Garden gardenObj = new Garden();
        gardenObj.Water();
        System.out.println("--------------------------");
        Garden flowerGardenObj = new FlowerGarden();
        flowerGardenObj.Water();
        System.out.println("--------------------------");
        FlowerGarden specificFlowerGarden = new FlowerGarden();
        specificFlowerGarden.Water();
        specificFlowerGarden.arrangeFlowers();
        System.out.println("--------------------------");
        GardenHandler gardenHandler = new GardenHandler();
        gardenHandler.handleGarden(gardenObj);
        gardenHandler.handleGarden(flowerGardenObj);
        gardenHandler.handleGarden(specificFlowerGarden);
        System.out.println("==========================");

        Flashcard flashcardObj = new Flashcard();
        flashcardObj.displayFront();
        System.out.println("--------------------------");
        Flashcard studyFlashcardObj = new StudyFlashcard();
        studyFlashcardObj.displayFront();
        System.out.println("--------------------------");
        StudyFlashcard specificStudyFlashcard = new StudyFlashcard();
        specificStudyFlashcard.displayFront();
        specificStudyFlashcard.review();
        System.out.println("--------------------------");
        FlashcardHandler flashHandler = new FlashcardHandler();
        flashHandler.manageFlashcard(flashcardObj);
        flashHandler.manageFlashcard(studyFlashcardObj);
        flashHandler.manageFlashcard(specificStudyFlashcard);
        System.out.println("==========================");

        Letter letterObj = new Letter();
        letterObj.send();
        System.out.println("--------------------------");
        Letter greetingLetterObj = new GreetingLetter();
        greetingLetterObj.send();
        System.out.println("--------------------------");
        GreetingLetter specificGreetingLetter = new GreetingLetter();
        specificGreetingLetter.send();
        specificGreetingLetter.addGreeting();
        System.out.println("--------------------------");
        LetterHandler letterHandler = new LetterHandler();
        letterHandler.manageLetter(letterObj);
        letterHandler.manageLetter(greetingLetterObj);
        letterHandler.manageLetter(specificGreetingLetter );
        System.out.println("==========================");





    }


}

